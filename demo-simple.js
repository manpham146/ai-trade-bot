require('dotenv').config();
const TradingBot = require('./dist/bot/TradingBot').default;
const Logger = require('./dist/utils/Logger').default;

async function runDemo() {
    try {
        Logger.info('üöÄ Kh·ªüi ƒë·ªông Demo AI Trading Bot...');
        
        // Ki·ªÉm tra file .env
        if (!process.env.OKX_API_KEY || !process.env.OKX_SECRET_KEY || !process.env.OKX_PASSPHRASE) {
            Logger.warn('‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API keys. Ch·∫°y "npm run setup-wizard" ƒë·ªÉ c·∫•u h√¨nh.');
            Logger.info('üìù Demo s·∫Ω ch·∫°y ·ªü ch·∫ø ƒë·ªô simulation...');
        }
        
        // T·∫°o config m·∫∑c ƒë·ªãnh cho demo
        const config = {
            exchange: 'okx',
            symbol: 'BTC/USDT',
            apiKey: process.env.OKX_API_KEY || 'demo_key',
            secret: process.env.OKX_SECRET_KEY || 'demo_secret',
            passphrase: process.env.OKX_PASSPHRASE || 'demo_passphrase',
            sandbox: process.env.OKX_SANDBOX === 'true'
        };
        
        // Kh·ªüi t·∫°o bot
        const bot = new TradingBot(config);
        
        Logger.info('üîß ƒêang kh·ªüi t·∫°o Trading Bot...');
        
        // Ch·ªâ kh·ªüi t·∫°o exchange n·∫øu c√≥ API keys
        if (process.env.OKX_API_KEY && process.env.OKX_SECRET_KEY && process.env.OKX_PASSPHRASE) {
            await bot.initializeExchange();
            Logger.info('üìä ƒêang ph√¢n t√≠ch th·ªã tr∆∞·ªùng...');
            await bot.analyzeAndTrade();
        } else {
            Logger.info('üìä Demo mode: M√¥ ph·ªèng ph√¢n t√≠ch th·ªã tr∆∞·ªùng...');
            Logger.info('üéØ T√≠n hi·ªáu demo: HOLD (Confidence: 75%)');
            Logger.info('üí≠ L√Ω do: Demo mode - kh√¥ng c√≥ k·∫øt n·ªëi th·ª±c t·∫ø');
        }
        
        Logger.info('‚úÖ Demo ho√†n th√†nh!');
        Logger.info('üí° ƒê·ªÉ ch·∫°y bot th·ª±c t·∫ø, s·ª≠ d·ª•ng: npm start');
        
    } catch (error) {
        Logger.error('‚ùå L·ªói demo:', error.message);
        Logger.info('üí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:');
        Logger.info('   1. Ch·∫°y "npm run setup-wizard" ƒë·ªÉ c·∫•u h√¨nh');
        Logger.info('   2. Ki·ªÉm tra k·∫øt n·ªëi internet');
        Logger.info('   3. ƒê·∫£m b·∫£o API keys h·ª£p l·ªá');
    }
}

// Ch·∫°y demo
runDemo().then(() => {
    process.exit(0);
}).catch(error => {
    Logger.error('‚ùå Demo th·∫•t b·∫°i:', error);
    process.exit(1);
});