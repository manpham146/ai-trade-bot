#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs');
const { execSync } = require('child_process');

// Colors for console output
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function colorize(text, color) {
    return `${colors[color]}${text}${colors.reset}`;
}

function printHeader() {
    console.log(colorize('\nüöÄ AI Trading Bot - Setup Wizard', 'cyan'));
    console.log(colorize('=====================================', 'cyan'));
    console.log('Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi AI Trading Bot v2.0.0!');
    console.log('Wizard n√†y s·∫Ω gi√∫p b·∫°n c·∫•u h√¨nh bot m·ªôt c√°ch d·ªÖ d√†ng.\n');
}

function printStep(step, title) {
    console.log(colorize(`\nüìã B∆∞·ªõc ${step}: ${title}`, 'yellow'));
    console.log(colorize('‚îÄ'.repeat(50), 'yellow'));
}

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

function validateApiKey(apiKey) {
    // Basic validation for OKX API key format
    return apiKey && apiKey.length >= 64 && /^[A-Za-z0-9]+$/.test(apiKey);
}

function validateSecretKey(secretKey) {
    // Basic validation for OKX secret key format
    return secretKey && secretKey.length >= 32 && /^[A-Za-z0-9+/=]+$/.test(secretKey);
}

function validatePassphrase(passphrase) {
    // Basic validation for OKX passphrase
    return passphrase && passphrase.length >= 1 && passphrase.length <= 30;
}

async function setupApiKeys() {
    printStep(1, 'C·∫•u h√¨nh API Keys');

    console.log('üîë ƒê·ªÉ s·ª≠ d·ª•ng bot, b·∫°n c·∫ßn API keys t·ª´ OKX.');
    console.log('\nüìñ H∆∞·ªõng d·∫´n l·∫•y API keys:');
    console.log('1. ƒêƒÉng nh·∫≠p v√†o OKX.com');
    console.log('2. V√†o Profile > API Management');
    console.log('3. T·∫°o API key m·ªõi v·ªõi quy·ªÅn "Trade"');
    console.log('4. L∆∞u l·∫°i API Key, Secret Key v√† Passphrase');
    console.log('5. Th√™m IP c·ªßa b·∫°n v√†o whitelist (khuy·∫øn ngh·ªã)');

    const hasApiKeys = await question('\n‚ùì B·∫°n ƒë√£ c√≥ API keys ch∆∞a? (y/n): ');

    if (hasApiKeys.toLowerCase() !== 'y') {
        console.log(colorize('\n‚ö†Ô∏è  Vui l√≤ng l·∫•y API keys tr∆∞·ªõc khi ti·∫øp t·ª•c.', 'yellow'));
        console.log('üåê Link: https://www.okx.com/account/my-api');
        process.exit(0);
    }

    let apiKey, secretKey, passphrase;

    do {
        apiKey = await question('\nüîë Nh·∫≠p OKX API Key: ');
        if (!validateApiKey(apiKey)) {
            console.log(colorize('‚ùå API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.', 'red'));
        }
    } while (!validateApiKey(apiKey));

    do {
        secretKey = await question('üîê Nh·∫≠p OKX Secret Key: ');
        if (!validateSecretKey(secretKey)) {
            console.log(colorize('‚ùå Secret Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.', 'red'));
        }
    } while (!validateSecretKey(secretKey));

    do {
        passphrase = await question('üîí Nh·∫≠p OKX Passphrase: ');
        if (!validatePassphrase(passphrase)) {
            console.log(colorize('‚ùå Passphrase kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.', 'red'));
        }
    } while (!validatePassphrase(passphrase));

    return { apiKey, secretKey, passphrase };
}

async function setupTradingConfig() {
    printStep(2, 'C·∫•u h√¨nh Trading');

    console.log('üí∞ Thi·∫øt l·∫≠p c√°c th√¥ng s·ªë giao d·ªãch:');

    const tradingPair = await question('\nüìä Trading Pair (m·∫∑c ƒë·ªãnh BTC/USDT): ') || 'BTC/USDT';
    const tradeAmount = await question('üíµ S·ªë ti·ªÅn m·ªói l·ªánh ($) (m·∫∑c ƒë·ªãnh 10): ') || '10';
    const stopLoss = await question('üõ°Ô∏è  Stop Loss (%) (m·∫∑c ƒë·ªãnh 2): ') || '2';
    const takeProfit = await question('üéØ Take Profit (%) (m·∫∑c ƒë·ªãnh 3): ') || '3';
    const maxTrades = await question('üìà Max trades/ng√†y (m·∫∑c ƒë·ªãnh 5): ') || '5';

    return {
        tradingPair,
        tradeAmount: parseFloat(tradeAmount),
        stopLoss: parseFloat(stopLoss),
        takeProfit: parseFloat(takeProfit),
        maxTrades: parseInt(maxTrades)
    };
}

async function setupRiskLevel() {
    printStep(3, 'Ch·ªçn M·ª©c ƒê·ªô R·ªßi Ro');

    console.log('‚öñÔ∏è  Ch·ªçn m·ª©c ƒë·ªô r·ªßi ro ph√π h·ª£p v·ªõi b·∫°n:');
    console.log('\n1. üü¢ Th·∫•p (Conservative) - M·ª•c ti√™u 0.5%/tu·∫ßn');
    console.log('   ‚Ä¢ Stop Loss: 1%');
    console.log('   ‚Ä¢ Take Profit: 1.5%');
    console.log('   ‚Ä¢ AI Confidence: 0.8');
    console.log('   ‚Ä¢ Max Trades: 3/ng√†y');

    console.log('\n2. üü° Trung B√¨nh (Balanced) - M·ª•c ti√™u 1%/tu·∫ßn');
    console.log('   ‚Ä¢ Stop Loss: 2%');
    console.log('   ‚Ä¢ Take Profit: 3%');
    console.log('   ‚Ä¢ AI Confidence: 0.7');
    console.log('   ‚Ä¢ Max Trades: 5/ng√†y');

    console.log('\n3. üî¥ Cao (Aggressive) - M·ª•c ti√™u 2%/tu·∫ßn');
    console.log('   ‚Ä¢ Stop Loss: 3%');
    console.log('   ‚Ä¢ Take Profit: 4%');
    console.log('   ‚Ä¢ AI Confidence: 0.6');
    console.log('   ‚Ä¢ Max Trades: 8/ng√†y');

    let riskLevel;
    do {
        riskLevel = await question('\n‚ùì Ch·ªçn m·ª©c r·ªßi ro (1-3): ');
    } while (!['1', '2', '3'].includes(riskLevel));

    const riskConfigs = {
        '1': { stopLoss: 1, takeProfit: 1.5, confidence: 0.8, maxTrades: 3 },
        '2': { stopLoss: 2, takeProfit: 3, confidence: 0.7, maxTrades: 5 },
        '3': { stopLoss: 3, takeProfit: 4, confidence: 0.6, maxTrades: 8 }
    };

    return riskConfigs[riskLevel];
}

async function setupMode() {
    printStep(4, 'Ch·ªçn Ch·∫ø ƒê·ªô Ho·∫°t ƒê·ªông');

    console.log('üéÆ Ch·ªçn ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông:');
    console.log('\n1. üß™ Demo Mode - Ch·ªâ ph√¢n t√≠ch, kh√¥ng giao d·ªãch');
    console.log('2. üìÑ Paper Trading - Giao d·ªãch ·∫£o v·ªõi d·ªØ li·ªáu th·∫≠t');
    console.log('3. üí∞ Live Trading - Giao d·ªãch th·∫≠t (C·∫®N TH·∫¨N!)');

    let mode;
    do {
        mode = await question('\n‚ùì Ch·ªçn ch·∫ø ƒë·ªô (1-3): ');
    } while (!['1', '2', '3'].includes(mode));

    const modeConfigs = {
        '1': { tradingEnabled: false, sandbox: true, description: 'Demo Mode' },
        '2': { tradingEnabled: false, sandbox: true, description: 'Paper Trading' },
        '3': { tradingEnabled: true, sandbox: false, description: 'Live Trading' }
    };

    const config = modeConfigs[mode];

    if (mode === '3') {
        console.log(colorize('\n‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫†N ƒêANG CH·ªåN LIVE TRADING!', 'red'));
        console.log(colorize('üí∏ Bot s·∫Ω giao d·ªãch v·ªõi ti·ªÅn th·∫≠t c·ªßa b·∫°n!', 'red'));
        const confirm = await question('‚ùì B·∫°n c√≥ ch·∫Øc ch·∫Øn? (yes/no): ');
        if (confirm.toLowerCase() !== 'yes') {
            console.log('‚úÖ Chuy·ªÉn v·ªÅ Paper Trading ƒë·ªÉ an to√†n.');
            return modeConfigs['2'];
        }
    }

    return config;
}

function generateEnvFile(config) {
    const envContent = `# API Configuration
OKX_API_KEY=${config.apiKey}
OKX_SECRET_KEY=${config.secretKey}
OKX_PASSPHRASE=${config.passphrase}
OKX_SANDBOX=${config.sandbox}

# Trading Configuration
TRADING_PAIR=${config.tradingPair}
BASE_CURRENCY=USDT
TRADE_AMOUNT=${config.tradeAmount}
MAX_TRADES_PER_DAY=${config.maxTrades}

# Risk Management
STOP_LOSS_PERCENTAGE=${config.stopLoss}
TAKE_PROFIT_PERCENTAGE=${config.takeProfit}
MAX_POSITION_SIZE=100

# AI Configuration
AI_MODEL_PATH=./models/btc_prediction_model
TRAINING_DATA_DAYS=30
PREDICTION_CONFIDENCE_THRESHOLD=${config.confidence}

# Bot Settings
TRADING_ENABLED=${config.tradingEnabled}
LOG_LEVEL=info
WEB_PORT=3000
WEB_DASHBOARD_ENABLED=true
WEBHOOK_URL=

# Database (Optional)
MONGO_URI=mongodb://localhost:27017/trading-bot
`;

    fs.writeFileSync('.env', envContent);
    console.log(colorize('\n‚úÖ File .env ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!', 'green'));
}

async function runHealthCheck() {
    printStep(5, 'Ki·ªÉm Tra H·ªá Th·ªëng');

    console.log('üè• ƒêang ch·∫°y health check...');

    try {
        execSync('npm run health-check', { stdio: 'inherit' });
    } catch (error) {
        console.log(colorize('\n‚ö†Ô∏è  C√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán.', 'yellow'));
        console.log('üìã Vui l√≤ng xem b√°o c√°o chi ti·∫øt ·ªü tr√™n.');
    }
}

async function showNextSteps(config) {
    printStep(6, 'C√°c B∆∞·ªõc Ti·∫øp Theo');

    console.log(colorize('üéâ Thi·∫øt l·∫≠p ho√†n t·∫•t!', 'green'));
    console.log(`\nüìä C·∫•u h√¨nh c·ªßa b·∫°n:`);
    console.log(`   ‚Ä¢ Ch·∫ø ƒë·ªô: ${config.description}`);
    console.log(`   ‚Ä¢ Trading Pair: ${config.tradingPair}`);
    console.log(`   ‚Ä¢ S·ªë ti·ªÅn/l·ªánh: $${config.tradeAmount}`);
    console.log(`   ‚Ä¢ Stop Loss: ${config.stopLoss}%`);
    console.log(`   ‚Ä¢ Take Profit: ${config.takeProfit}%`);
    console.log(`   ‚Ä¢ Max Trades: ${config.maxTrades}/ng√†y`);

    console.log(colorize('\nüöÄ C√°c l·ªánh h·ªØu √≠ch:', 'cyan'));
    console.log('   npm run demo          # Ch·∫°y demo mode');
    console.log('   npm run train-ai      # Hu·∫•n luy·ªán AI model');
    console.log('   npm run backtest      # Ki·ªÉm th·ª≠ chi·∫øn l∆∞·ª£c');
    console.log('   npm run web-dashboard # Kh·ªüi ƒë·ªông dashboard');
    console.log('   npm start             # Ch·∫°y bot');

    console.log(colorize('\nüìö T√†i li·ªáu:', 'cyan'));
    console.log('   README.md             # H∆∞·ªõng d·∫´n chi ti·∫øt');
    console.log('   QUICK_START.md        # H∆∞·ªõng d·∫´n nhanh');
    console.log('   UPGRADE_GUIDE.md      # H∆∞·ªõng d·∫´n n√¢ng c·∫•p');

    if (!config.tradingEnabled) {
        console.log(colorize('\nüí° Khuy·∫øn ngh·ªã:', 'yellow'));
        console.log('1. Ch·∫°y "npm run train-ai" ƒë·ªÉ hu·∫•n luy·ªán AI');
        console.log('2. Ch·∫°y "npm run backtest" ƒë·ªÉ test chi·∫øn l∆∞·ª£c');
        console.log('3. Ch·∫°y "npm run demo" ƒë·ªÉ xem bot ho·∫°t ƒë·ªông');
        console.log('4. Khi s·∫µn s√†ng, b·∫≠t TRADING_ENABLED=true trong .env');
    } else {
        console.log(colorize('\n‚ö†Ô∏è  L∆∞u √Ω quan tr·ªçng:', 'red'));
        console.log('‚Ä¢ Bot s·∫Ω giao d·ªãch v·ªõi ti·ªÅn th·∫≠t!');
        console.log('‚Ä¢ Theo d√µi dashboard th∆∞·ªùng xuy√™n');
        console.log('‚Ä¢ ƒê·∫∑t stop-loss ch·∫∑t ch·∫Ω');
        console.log('‚Ä¢ B·∫Øt ƒë·∫ßu v·ªõi s·ªë ti·ªÅn nh·ªè');
    }

    console.log(colorize('\nüéØ M·ª•c ti√™u: An to√†n v·ªën l√† ∆∞u ti√™n s·ªë 1!', 'green'));
}

async function main() {
    try {
        printHeader();

        // Step 1: API Keys
        const { apiKey, secretKey } = await setupApiKeys();

        // Step 2: Trading Config
        const tradingConfig = await setupTradingConfig();

        // Step 3: Risk Level
        const riskConfig = await setupRiskLevel();

        // Step 4: Mode
        const modeConfig = await setupMode();

        // Combine all configs
        const finalConfig = {
            apiKey,
            secretKey,
            ...tradingConfig,
            ...riskConfig,
            ...modeConfig
        };

        // Generate .env file
        generateEnvFile(finalConfig);

        // Run health check
        await runHealthCheck();

        // Show next steps
        await showNextSteps(finalConfig);

    } catch (error) {
        console.error(colorize('\n‚ùå L·ªói trong qu√° tr√¨nh setup:', 'red'), error.message);
    } finally {
        rl.close();
    }
}

if (require.main === module) {
    main();
}

module.exports = { main };
