#!/usr/bin/env ts-node

import * as readline from 'readline';
import { promises as fs } from 'fs';
import * as path from 'path';
import Logger from './utils/Logger';

/**
 * Setup Wizard - H∆∞·ªõng d·∫´n c·∫•u h√¨nh bot t·ª´ng b∆∞·ªõc
 */

interface SetupConfig {
    exchangeApiKey: string;
    exchangeSecret: string;
    exchangePassphrase: string;
    exchangeSandbox: boolean;
    tradingSymbol: string;
    tradingAmount: number;
    stopLossPercentage: number;
    takeProfitPercentage: number;
    maxDailyTrades: number;
    riskPerTrade: number;
    maxPositionSize: number;
    predictionConfidenceThreshold: number;
}

class SetupWizard {
    private rl: readline.Interface;
    private config: Partial<SetupConfig> = {};

    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    /**
     * B·∫Øt ƒë·∫ßu setup wizard
     */
    async start(): Promise<void> {
        try {
            console.log('\nü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Trading Bot Setup Wizard!');
            console.log('üìù T√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c·∫•u h√¨nh bot t·ª´ng b∆∞·ªõc\n');

            await this.collectApiCredentials();
            await this.collectTradingSettings();
            await this.collectRiskSettings();
            await this.collectAISettings();
            await this.confirmSettings();
            await this.saveConfiguration();
            await this.showNextSteps();

        } catch (error) {
            Logger.error('‚ùå L·ªói trong qu√° tr√¨nh setup:', (error as Error).message);
        } finally {
            this.rl.close();
        }
    }

    /**
     * Thu th·∫≠p th√¥ng tin API
     */
    private async collectApiCredentials(): Promise<void> {
        console.log('üîë B∆Ø·ªöC 1: C·∫•u h√¨nh API Keys');
        console.log('B·∫°n c·∫ßn API keys t·ª´ OKX ƒë·ªÉ bot c√≥ th·ªÉ giao d·ªãch\n');

        this.config.exchangeApiKey = await this.ask('Nh·∫≠p OKX API Key: ');
        this.config.exchangeSecret = await this.ask('Nh·∫≠p OKX Secret Key: ');
        this.config.exchangePassphrase = await this.ask('Nh·∫≠p OKX Passphrase: ');
        
        const sandboxChoice = await this.ask('S·ª≠ d·ª•ng Demo Trading (khuy·∫øn ngh·ªã cho test)? (y/n): ');
        this.config.exchangeSandbox = sandboxChoice.toLowerCase() === 'y';

        console.log('‚úÖ API credentials ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh\n');
    }

    /**
     * Thu th·∫≠p c√†i ƒë·∫∑t giao d·ªãch
     */
    private async collectTradingSettings(): Promise<void> {
        console.log('üí∞ B∆Ø·ªöC 2: C·∫•u h√¨nh Giao D·ªãch');
        
        const symbol = await this.ask('Trading pair (m·∫∑c ƒë·ªãnh BTC/USDT): ');
        this.config.tradingSymbol = symbol || 'BTC/USDT';
        
        const amount = await this.ask('S·ªë ti·ªÅn m·ªói l·ªánh ($) (m·∫∑c ƒë·ªãnh 10): ');
        this.config.tradingAmount = parseFloat(amount) || 10;
        
        const maxTrades = await this.ask('S·ªë l·ªánh t·ªëi ƒëa m·ªói ng√†y (m·∫∑c ƒë·ªãnh 5): ');
        this.config.maxDailyTrades = parseInt(maxTrades) || 5;

        console.log('‚úÖ C√†i ƒë·∫∑t giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh\n');
    }

    /**
     * Thu th·∫≠p c√†i ƒë·∫∑t qu·∫£n l√Ω r·ªßi ro
     */
    private async collectRiskSettings(): Promise<void> {
        console.log('üõ°Ô∏è B∆Ø·ªöC 3: Qu·∫£n L√Ω R·ªßi Ro (Quan tr·ªçng!)');
        console.log('M·ª•c ti√™u: 1%/tu·∫ßn v·ªõi r·ªßi ro th·∫•p\n');
        
        const stopLoss = await this.ask('Stop Loss % (m·∫∑c ƒë·ªãnh 2%): ');
        this.config.stopLossPercentage = parseFloat(stopLoss) || 2;
        
        const takeProfit = await this.ask('Take Profit % (m·∫∑c ƒë·ªãnh 3%): ');
        this.config.takeProfitPercentage = parseFloat(takeProfit) || 3;
        
        const riskPerTrade = await this.ask('Risk per trade % c·ªßa t·ªïng v·ªën (m·∫∑c ƒë·ªãnh 1%): ');
        this.config.riskPerTrade = parseFloat(riskPerTrade) / 100 || 0.01;
        
        const maxPosition = await this.ask('Max position size % c·ªßa t·ªïng v·ªën (m·∫∑c ƒë·ªãnh 10%): ');
        this.config.maxPositionSize = parseFloat(maxPosition) / 100 || 0.1;

        console.log('‚úÖ Qu·∫£n l√Ω r·ªßi ro ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh\n');
    }

    /**
     * Thu th·∫≠p c√†i ƒë·∫∑t AI
     */
    private async collectAISettings(): Promise<void> {
        console.log('üß† B∆Ø·ªöC 4: C·∫•u h√¨nh AI');
        
        const confidence = await this.ask('AI Confidence threshold (0.1-1.0, m·∫∑c ƒë·ªãnh 0.7): ');
        this.config.predictionConfidenceThreshold = parseFloat(confidence) || 0.7;

        console.log('‚úÖ C√†i ƒë·∫∑t AI ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh\n');
    }

    /**
     * X√°c nh·∫≠n c√†i ƒë·∫∑t
     */
    private async confirmSettings(): Promise<void> {
        console.log('üìã X√ÅC NH·∫¨N C√ÄI ƒê·∫∂T:');
        console.log('========================');
        console.log(`Exchange: OKX`);
        console.log(`API Key: ${this.maskApiKey(this.config.exchangeApiKey!)}`);
        console.log(`Passphrase: ${this.maskApiKey(this.config.exchangePassphrase!)}`);
        console.log(`Demo Trading: ${this.config.exchangeSandbox ? 'C√≥' : 'Kh√¥ng'}`);
        console.log(`Trading Pair: ${this.config.tradingSymbol}`);
        console.log(`Amount per trade: $${this.config.tradingAmount}`);
        console.log(`Max trades/day: ${this.config.maxDailyTrades}`);
        console.log(`Stop Loss: ${this.config.stopLossPercentage}%`);
        console.log(`Take Profit: ${this.config.takeProfitPercentage}%`);
        console.log(`Risk per trade: ${(this.config.riskPerTrade! * 100).toFixed(1)}%`);
        console.log(`Max position: ${(this.config.maxPositionSize! * 100).toFixed(1)}%`);
        console.log(`AI Confidence: ${this.config.predictionConfidenceThreshold}`);
        console.log('========================\n');

        const confirm = await this.ask('X√°c nh·∫≠n c√†i ƒë·∫∑t n√†y? (y/n): ');
        if (confirm.toLowerCase() !== 'y') {
            console.log('‚ùå Setup b·ªã h·ªßy');
            process.exit(0);
        }
    }

    /**
     * L∆∞u c·∫•u h√¨nh v√†o file .env
     */
    private async saveConfiguration(): Promise<void> {
        const envContent = `# API Keys cho s√†n giao d·ªãch OKX
EXCHANGE_API_KEY=${this.config.exchangeApiKey}
EXCHANGE_SECRET=${this.config.exchangeSecret}
EXCHANGE_PASSPHRASE=${this.config.exchangePassphrase}
EXCHANGE_SANDBOX=${this.config.exchangeSandbox}

# C·∫•u h√¨nh giao d·ªãch
TRADING_SYMBOL=${this.config.tradingSymbol}
TRADING_AMOUNT=${this.config.tradingAmount}
MAX_DAILY_TRADES=${this.config.maxDailyTrades}
STOP_LOSS_PERCENTAGE=${this.config.stopLossPercentage}
TAKE_PROFIT_PERCENTAGE=${this.config.takeProfitPercentage}

# C·∫•u h√¨nh AI
PREDICTION_CONFIDENCE_THRESHOLD=${this.config.predictionConfidenceThreshold}
MODEL_UPDATE_INTERVAL=24

# C·∫•u h√¨nh r·ªßi ro
MAX_POSITION_SIZE=${this.config.maxPositionSize}
RISK_PER_TRADE=${this.config.riskPerTrade}
MAX_DRAWDOWN=0.05

# Logging
LOG_LEVEL=info
LOG_TO_FILE=true

# Database (t√πy ch·ªçn)
DATABASE_URL=sqlite:./data/trading.db

# C·∫•u h√¨nh kh√°c
TIMEZONE=Asia/Ho_Chi_Minh
BACKTEST_DAYS=30
DATA_RETENTION_DAYS=90
`;

        await fs.writeFile('.env', envContent);
        console.log('‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file .env\n');
    }

    /**
     * Hi·ªÉn th·ªã c√°c b∆∞·ªõc ti·∫øp theo
     */
    private async showNextSteps(): Promise<void> {
        console.log('üéâ SETUP HO√ÄN TH√ÄNH!');
        console.log('\nüìã C√ÅC B∆Ø·ªöC TI·∫æP THEO:');
        console.log('1. npm run build          # Build project');
        console.log('2. npm run train-ai       # Hu·∫•n luy·ªán AI (t√πy ch·ªçn)');
        console.log('3. npm start              # Ch·∫°y bot');
        console.log('\n‚ö†Ô∏è  L∆ØU √ù:');
        console.log('- Bot s·∫Ω ch·∫°y ·ªü sandbox mode ƒë·ªÉ test an to√†n');
        console.log('- Theo d√µi log ƒë·ªÉ ƒë·∫£m b·∫£o bot ho·∫°t ƒë·ªông ƒë√∫ng');
        console.log('- Ch·ªâ chuy·ªÉn sang mainnet khi ƒë√£ test k·ªπ');
        console.log('\nüéØ M·ª§C TI√äU: 1%/tu·∫ßn v·ªõi r·ªßi ro th·∫•p');
        console.log('üìà TRI·∫æT L√ù: An To√†n V·ªën L√† ∆Øu Ti√™n S·ªë M·ªôt\n');
    }

    /**
     * H·ªèi ng∆∞·ªùi d√πng
     */
    private async ask(question: string): Promise<string> {
        return new Promise((resolve) => {
            this.rl.question(question, resolve);
        });
    }

    /**
     * ·∫®n API key
     */
    private maskApiKey(apiKey: string): string {
        if (!apiKey || apiKey.length < 8) return '***';
        return apiKey.substring(0, 4) + '***' + apiKey.substring(apiKey.length - 4);
    }
}

// Ch·∫°y setup wizard
if (require.main === module) {
    const wizard = new SetupWizard();
    wizard.start().catch(console.error);
}

export default SetupWizard;