import MarketAnalyzer from '../bot/MarketAnalyzer';
import RiskManager from '../bot/RiskManager';
import Logger from '../utils/Logger';

/**
 * Test chi·∫øn l∆∞·ª£c giao d·ªãch m·ªõi
 * Ki·ªÉm tra logic trend following v·ªõi MA50/MA200 v√† EMA20
 */
class StrategyTest {
    private marketAnalyzer: MarketAnalyzer;
    private riskManager: RiskManager;

    constructor() {
        this.marketAnalyzer = new MarketAnalyzer();
        this.riskManager = new RiskManager();
    }

    /**
     * Test d·ªØ li·ªáu m·∫´u cho BTC/USDT
     */
    private generateTestData() {
        // D·ªØ li·ªáu gi√° m·∫´u cho test
        const prices = [];
        let basePrice = 45000;

        // T·∫°o 200 n·∫øn gi√° (cho MA200)
        for (let i = 0; i < 200; i++) {
            const variation = (Math.random() - 0.5) * 1000; // Bi·∫øn ƒë·ªông ¬±500
            basePrice += variation;

            prices.push({
                timestamp: Date.now() - (200 - i) * 3600000, // 1h m·ªói n·∫øn
                open: basePrice - Math.random() * 100,
                high: basePrice + Math.random() * 200,
                low: basePrice - Math.random() * 200,
                close: basePrice,
                volume: 1000 + Math.random() * 500
            });
        }

        return prices;
    }

    /**
     * Test ph√¢n t√≠ch xu h∆∞·ªõng D1
     */
    async testDailyTrendAnalysis(): Promise<any> {
        Logger.info('üß™ Test ph√¢n t√≠ch xu h∆∞·ªõng D1...');

        const testData = this.generateTestData();
        const marketData = {
            symbol: 'BTC/USDT',
            price: testData[testData.length - 1].close,
            volume: testData[testData.length - 1].volume,
            timestamp: Date.now(),
            ohlcv: testData.map(d => [d.timestamp, d.open, d.high, d.low, d.close, d.volume])
        };
        const analysis = await this.marketAnalyzer.analyze(marketData);

        Logger.info('üìä K·∫øt qu·∫£ ph√¢n t√≠ch:');
        Logger.info(`- Xu h∆∞·ªõng D1: ${(analysis as any).dailyTrend}`);
        Logger.info(`- MA50 D1: ${(analysis as any).ma50_d1?.toFixed(2)}`);
        Logger.info(`- MA200 D1: ${(analysis as any).ma200_d1?.toFixed(2)}`);
        Logger.info(`- EMA20 H1: ${(analysis as any).ema20?.toFixed(2)}`);
        Logger.info(`- ƒêi·ªÅu ki·ªán v√†o l·ªánh: ${(analysis as any).entryCondition}`);
        Logger.info(`- T√≠n hi·ªáu: ${analysis.signal}`);
        Logger.info(`- ƒê·ªô tin c·∫≠y: ${(analysis.confidence * 100).toFixed(1)}%`);

        return analysis;
    }

    /**
     * Test qu·∫£n l√Ω r·ªßi ro
     */
    async testRiskManagement() {
        Logger.info('üõ°Ô∏è Test qu·∫£n l√Ω r·ªßi ro...');

        const balance = 10000; // $10,000
        const entryPrice = 45000;
        const stopLoss = 44550; // 1% stop loss

        // Test position size calculation
        const safeSize = this.riskManager.calculateSafePositionSize(balance, entryPrice, stopLoss);
        const riskAmount = Math.abs(entryPrice - stopLoss) * (safeSize / entryPrice);
        const riskPercent = (riskAmount / balance) * 100;

        Logger.info(`üí∞ T√†i kho·∫£n: $${balance.toLocaleString()}`);
        Logger.info(`üìà Gi√° v√†o l·ªánh: $${entryPrice.toLocaleString()}`);
        Logger.info(`üõë Stop Loss: $${stopLoss.toLocaleString()}`);
        Logger.info(`üìä Position size an to√†n: $${safeSize.toFixed(2)}`);
        Logger.info(`‚ö†Ô∏è R·ªßi ro th·ª±c t·∫ø: ${riskPercent.toFixed(3)}% (m·ª•c ti√™u ‚â§ 0.5%)`);

        // Test weekly loss limit
        const weeklyProfit = -120; // L·ªó $120
        const withinLimit = this.riskManager.checkWeeklyLossLimit(balance, weeklyProfit);
        const weeklyLossPercent = (weeklyProfit / balance) * 100;

        Logger.info(`üìÖ L·ªó tu·∫ßn: $${Math.abs(weeklyProfit)} (${weeklyLossPercent.toFixed(2)}%)`);
        Logger.info(`‚úÖ Trong gi·ªõi h·∫°n 1.5%: ${withinLimit ? 'C√ì' : 'KH√îNG'}`);

        return {
            safeSize,
            riskPercent,
            withinLimit,
            weeklyLossPercent
        };
    }

    /**
     * Test t√≠ch h·ª£p AI (m√¥ ph·ªèng)
     */
    async testAIIntegration(): Promise<any> {
        Logger.info('ü§ñ Test t√≠ch h·ª£p AI...');

        // M√¥ ph·ªèng d·ªØ li·ªáu AI
        const aiPrediction = {
            direction: 'UP' as const,
            confidence: 0.75,
            reasoning: 'Xu h∆∞·ªõng tƒÉng m·∫°nh, RSI oversold, volume tƒÉng'
        };

        const technicalSignal = await this.testDailyTrendAnalysis();

        // Logic x√°c nh·∫≠n AI
        const aiConfirms =
            aiPrediction.confidence > 0.6 &&
            aiPrediction.direction === 'UP' &&
            technicalSignal.signal === 'BUY';

        Logger.info(`üéØ AI d·ª± ƒëo√°n: ${aiPrediction.direction}`);
        Logger.info(`üîç ƒê·ªô tin c·∫≠y AI: ${(aiPrediction.confidence * 100).toFixed(1)}%`);
        Logger.info(`üìä T√≠n hi·ªáu k·ªπ thu·∫≠t: ${technicalSignal.signal}`);
        Logger.info(`‚úÖ AI x√°c nh·∫≠n: ${aiConfirms ? 'C√ì' : 'KH√îNG'}`);

        return {
            aiPrediction,
            technicalSignal,
            aiConfirms
        };
    }

    /**
     * Test t·ªïng h·ª£p chi·∫øn l∆∞·ª£c
     */
    async runFullStrategyTest() {
        Logger.info('üöÄ B·∫Øt ƒë·∫ßu test t·ªïng h·ª£p chi·∫øn l∆∞·ª£c m·ªõi...');
        Logger.info('='.repeat(50));

        try {
            // 1. Test ph√¢n t√≠ch k·ªπ thu·∫≠t
            const technicalResult = await this.testDailyTrendAnalysis();
            Logger.info('');

            // 2. Test qu·∫£n l√Ω r·ªßi ro
            const riskResult = await this.testRiskManagement();
            Logger.info('');

            // 3. Test t√≠ch h·ª£p AI
            const aiResult = await this.testAIIntegration();
            Logger.info('');

            // 4. K·∫øt lu·∫≠n
            Logger.info('üìã K·∫æT LU·∫¨N TEST:');
            Logger.info('='.repeat(30));

            const canTrade =
                (technicalResult as any).dailyTrend !== 'SIDEWAYS' &&
                (technicalResult as any).entryCondition &&
                riskResult.riskPercent <= 0.5 &&
                riskResult.withinLimit &&
                aiResult.aiConfirms;

            if (canTrade) {
                Logger.info('‚úÖ CHI·∫æN L∆Ø·ª¢C S·∫¥N S√ÄNG GIAO D·ªäCH');
                Logger.info('üéØ T·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n');
                Logger.info('üí° C√≥ th·ªÉ ti·∫øn h√†nh Paper Trading');
            } else {
                Logger.info('‚ö†Ô∏è CH∆ØA ƒê·ª¶ ƒêI·ªÄU KI·ªÜN GIAO D·ªäCH');
                Logger.info('üîç C·∫ßn ki·ªÉm tra l·∫°i c√°c ƒëi·ªÅu ki·ªán:');

                if ((technicalResult as any).dailyTrend === 'SIDEWAYS') {
                    Logger.info('  - Th·ªã tr∆∞·ªùng ƒëang sideway');
                }
                if (!(technicalResult as any).entryCondition) {
                    Logger.info('  - Ch∆∞a c√≥ ƒëi·ªÅu ki·ªán v√†o l·ªánh');
                }
                if (riskResult.riskPercent > 0.5) {
                    Logger.info('  - R·ªßi ro v∆∞·ª£t qu√° 0.5%');
                }
                if (!riskResult.withinLimit) {
                    Logger.info('  - V∆∞·ª£t gi·ªõi h·∫°n l·ªó tu·∫ßn');
                }
                if (!aiResult.aiConfirms) {
                    Logger.info('  - AI ch∆∞a x√°c nh·∫≠n t√≠n hi·ªáu');
                }
            }

            Logger.info('='.repeat(50));
            Logger.info('‚ú® Ho√†n th√†nh test chi·∫øn l∆∞·ª£c!');
        } catch (error) {
            Logger.error('‚ùå L·ªói trong qu√° tr√¨nh test:', (error as Error).message);
        }
    }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    const test = new StrategyTest();
    test.runFullStrategyTest();
}

export { StrategyTest };
