import 'dotenv/config';
import TradingBot from './bot/TradingBot';
import Logger from './utils/Logger';

/**
 * AI Trading Bot - Entry Point
 * Bot giao d·ªãch t·ª± ƒë·ªông v·ªõi t√≠ch h·ª£p AI cho c·∫∑p BTC/USDT
 */

interface BotConfig {
    exchange: string;
    symbol: string;
    apiKey: string;
    secret: string;
    passphrase: string;
    sandbox: boolean;
}

async function main(): Promise<void> {
    try {
        Logger.info('üöÄ Kh·ªüi ƒë·ªông AI Trading Bot...');

        // Ki·ªÉm tra c·∫•u h√¨nh m√¥i tr∆∞·ªùng
        if (!process.env.OKX_API_KEY || !process.env.OKX_SECRET_KEY || !process.env.OKX_PASSPHRASE) {
            throw new Error('‚ùå Thi·∫øu API keys! Vui l√≤ng c·∫•u h√¨nh file .env');
        }

        // Kh·ªüi t·∫°o bot
        const botConfig: BotConfig = {
            exchange: 'okx',
            symbol: process.env.TRADING_PAIR || 'BTC/USDT',
            apiKey: process.env.OKX_API_KEY,
            secret: process.env.OKX_SECRET_KEY,
            passphrase: process.env.OKX_PASSPHRASE,
            sandbox: process.env.OKX_SANDBOX === 'true'
        };

        const bot = new TradingBot(botConfig);

        // Kh·ªüi ƒë·ªông bot
        await bot.start();

        Logger.info('‚úÖ Bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!');

        // X·ª≠ l√Ω t√≠n hi·ªáu tho√°t
        process.on('SIGINT', async(): Promise<void> => {
            Logger.info('üõë ƒêang d·ª´ng bot...');
            await bot.stop();
            process.exit(0);
        });

    } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        Logger.error('‚ùå L·ªói kh·ªüi ƒë·ªông bot:', errorMessage);
        process.exit(1);
    }
}

// Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
if (require.main === module) {
    main();
}

export { main };
