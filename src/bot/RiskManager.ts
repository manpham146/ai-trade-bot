import Logger from '../utils/Logger';

/**
 * RiskManager - Qu·∫£n l√Ω r·ªßi ro giao d·ªãch
 * ƒê√°nh gi√° v√† ki·ªÉm so√°t r·ªßi ro ƒë·ªÉ b·∫£o v·ªá v·ªën ƒë·∫ßu t∆∞
 */

interface MarketData {
    currentPrice: number;
    ohlcv?: number[][];
    volume?: number;
    symbol?: string;
    timestamp?: number;
}

interface TechnicalAnalysis {
    indicators?: {
        rsi?: number;
        macd?: {
            histogram: number;
        };
        bollinger?: {
            upper: number;
            lower: number;
            middle: number;
        };
    };
    trend?: {
        direction: 'UPTREND' | 'DOWNTREND' | 'SIDEWAYS';
    };
    currentPrice?: number;
}

interface AIPrediction {
    confidence: number;
    signal: 'BUY' | 'SELL' | 'HOLD';
    timestamp?: number;
}

interface Position {
    entryPrice: number;
    entryTime: number;
    stopLoss?: number;
    takeProfit?: number;
    amount: number;
    side: 'BUY' | 'SELL';
}

interface Trade {
    id?: string;
    symbol: string;
    side: 'BUY' | 'SELL';
    amount: number;
    price: number;
    timestamp?: number;
    profit?: number;
}

interface RiskFactor {
    score: number;
    reason: string;
    [key: string]: any;
}

interface RiskAssessmentData {
    marketData: MarketData;
    technicalAnalysis: TechnicalAnalysis;
    aiPrediction: AIPrediction;
    currentPosition?: Position;
}

interface RiskBreakdown {
    volatility: RiskFactor;
    technical: RiskFactor;
    aiConfidence: RiskFactor;
    position: RiskFactor;
    frequency: RiskFactor;
}

interface OverallRisk {
    score: number;
    factors: string[];
    breakdown: RiskBreakdown;
}

interface RiskAssessment {
    level: 'LOW' | 'MEDIUM' | 'HIGH';
    score: number;
    factors: string[];
    recommendations: string[];
    positionSizing: number;
    stopLoss: number;
    takeProfit: number;
    error?: string;
}

class RiskManager {
    private maxPositionSize: number;
    private stopLossPercentage: number;
    private takeProfitPercentage: number;
    private maxTradesPerDay: number;
    private dailyTradeCount: number = 0;
    private lastTradeDate: string | null = null;
    private tradeHistory: (Trade & { timestamp: number })[] = [];
    private maxHistoryLength: number = 100;

    constructor() {
        // Chi·∫øn l∆∞·ª£c m·ªõi: An to√†n v·ªën l√† ∆∞u ti√™n s·ªë m·ªôt
        this.maxPositionSize = parseFloat(process.env.MAX_POSITION_SIZE || '50'); // Gi·∫£m position size
        this.stopLossPercentage = parseFloat(process.env.STOP_LOSS_PERCENTAGE || '1'); // Gi·∫£m stop loss
        this.takeProfitPercentage = parseFloat(process.env.TAKE_PROFIT_PERCENTAGE || '0.5'); // TP: 0.3-0.5%
        this.maxTradesPerDay = parseInt(process.env.MAX_TRADES_PER_DAY || '3'); // Gi·∫£m s·ªë l·ªánh/ng√†y
    }

    /**
     * Ki·ªÉm tra gi·ªõi h·∫°n l·ªó tu·∫ßn (1.5%)
     */
    checkWeeklyLossLimit(currentBalance: number, weeklyProfit: number): boolean {
        const weeklyLossPercent = (weeklyProfit / currentBalance) * 100;
        return weeklyLossPercent >= -1.5; // true n·∫øu ch∆∞a v∆∞·ª£t gi·ªõi h·∫°n
    }

    /**
     * T√≠nh to√°n position size v·ªõi r·ªßi ro t·ªëi ƒëa 0.5% m·ªói l·ªánh
     */
    calculateSafePositionSize(balance: number, entryPrice: number, stopLoss: number): number {
        const maxRiskAmount = balance * 0.005; // 0.5% c·ªßa t√†i kho·∫£n
        const riskPerUnit = Math.abs(entryPrice - stopLoss);
        
        if (riskPerUnit === 0) return 0;
        
        const maxUnits = maxRiskAmount / riskPerUnit;
        const maxPositionValue = maxUnits * entryPrice;
        
        // Gi·ªõi h·∫°n position kh√¥ng qu√° 10% t√†i kho·∫£n
        const maxAllowedValue = balance * 0.1;
        
        return Math.min(maxPositionValue, maxAllowedValue);
    }

    /**
     * ƒê√°nh gi√° r·ªßi ro t·ªïng th·ªÉ theo chi·∫øn l∆∞·ª£c m·ªõi
     */
    async assess(data: RiskAssessmentData): Promise<RiskAssessment> {
        try {
            const { marketData, technicalAnalysis, aiPrediction, currentPosition } = data;

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c∆° b·∫£n
            const factors: string[] = [];
            let riskScore = 0;

            // 1. Ki·ªÉm tra xu h∆∞·ªõng th·ªã tr∆∞·ªùng
            if ((technicalAnalysis as any)?.dailyTrend === 'SIDEWAYS') {
                riskScore += 0.8;
                factors.push('Th·ªã tr∆∞·ªùng sideway - R·ªßi ro cao');
            }

            // 2. ƒê√°nh gi√° ƒë·ªô tin c·∫≠y AI
            if (aiPrediction.confidence < 0.6) {
                riskScore += 0.3;
                factors.push('ƒê·ªô tin c·∫≠y AI th·∫•p');
            }

            // 3. Ki·ªÉm tra ƒëi·ªÅu ki·ªán v√†o l·ªánh
            if (!(technicalAnalysis as any)?.entryCondition) {
                riskScore += 0.4;
                factors.push('Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán v√†o l·ªánh');
            }

            // 4. ƒê√°nh gi√° volatility
            const volatilityRisk = this.assessVolatilityRisk(marketData);
            riskScore += volatilityRisk.score * 0.3;
            if (volatilityRisk.score > 0.6) {
                factors.push(volatilityRisk.reason);
            }

            // 5. Ki·ªÉm tra t·∫ßn su·∫•t giao d·ªãch
            const frequencyRisk = this.assessTradingFrequencyRisk();
            riskScore += frequencyRisk.score * 0.2;
            if (frequencyRisk.score > 0.5) {
                factors.push(frequencyRisk.reason);
            }

            // Gi·ªõi h·∫°n riskScore trong kho·∫£ng [0, 1]
            riskScore = Math.min(riskScore, 1);

            const level = this.getRiskLevel(riskScore);
            const recommendations = this.getNewStrategyRecommendations(riskScore, factors);

            return {
                level,
                score: riskScore,
                factors,
                recommendations,
                positionSizing: this.calculateNewPositionSize(riskScore, marketData),
                stopLoss: this.calculateSwingBasedStopLoss(marketData),
                takeProfit: this.calculateConservativeTakeProfit(marketData)
            };

        } catch (error) {
            Logger.error('‚ùå L·ªói ƒë√°nh gi√° r·ªßi ro:', (error as Error).message);
            return {
                level: 'HIGH',
                score: 0.9,
                factors: ['L·ªói h·ªá th·ªëng ƒë√°nh gi√° r·ªßi ro'],
                recommendations: ['D·ª´ng giao d·ªãch cho ƒë·∫øn khi kh·∫Øc ph·ª•c l·ªói'],
                positionSizing: 0,
                stopLoss: 0,
                takeProfit: 0,
                error: (error as Error).message
            };
        }
    }

    /**
     * ƒê∆∞a ra khuy·∫øn ngh·ªã theo chi·∫øn l∆∞·ª£c m·ªõi
     */
    private getNewStrategyRecommendations(riskScore: number, factors: string[]): string[] {
        const recommendations: string[] = [];

        if (riskScore > 0.7) {
            recommendations.push('üö´ KH√îNG giao d·ªãch - R·ªßi ro qu√° cao');
            recommendations.push('‚è≥ Ch·ªù ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng t·ªët h∆°n');
        } else if (riskScore > 0.5) {
            recommendations.push('‚ö†Ô∏è Gi·∫£m position size xu·ªëng 50%');
            recommendations.push('üéØ Ch·ªâ giao d·ªãch khi c√≥ x√°c nh·∫≠n AI cao');
        } else if (riskScore > 0.3) {
            recommendations.push('‚úÖ C√≥ th·ªÉ giao d·ªãch v·ªõi position size b√¨nh th∆∞·ªùng');
            recommendations.push('üìä Theo d√µi ch·∫∑t ch·∫Ω c√°c ch·ªâ b√°o');
        } else {
            recommendations.push('üöÄ ƒêi·ªÅu ki·ªán t·ªët cho giao d·ªãch');
            recommendations.push('üí∞ C√≥ th·ªÉ tƒÉng position size nh·∫π');
        }

        return recommendations;
    }

    /**
     * T√≠nh to√°n position size theo chi·∫øn l∆∞·ª£c m·ªõi
     */
    private calculateNewPositionSize(riskScore: number, marketData: any): number {
        const baseSize = this.maxPositionSize;
        
        if (riskScore > 0.7) return 0; // Kh√¥ng giao d·ªãch
        if (riskScore > 0.5) return baseSize * 0.5; // Gi·∫£m 50%
        if (riskScore > 0.3) return baseSize * 0.8; // Gi·∫£m 20%
        
        return baseSize; // Position size ƒë·∫ßy ƒë·ªß
    }

    /**
     * T√≠nh to√°n stop loss d·ª±a tr√™n swing high/low
     */
    private calculateSwingBasedStopLoss(marketData: any): number {
        // T·∫°m th·ªùi s·ª≠ d·ª•ng 1% cho ƒë·∫øn khi c√≥ d·ªØ li·ªáu swing
        const currentPrice = marketData.close;
        return currentPrice * 0.01; // 1% stop loss
    }

    /**
     * T√≠nh to√°n take profit b·∫£o th·ªß (0.3-0.5%)
     */
    private calculateConservativeTakeProfit(marketData: any): number {
        const currentPrice = marketData.close;
        return currentPrice * 0.004; // 0.4% take profit
    }

    /**
     * ƒê√°nh gi√° r·ªßi ro t·ª´ ƒë·ªô bi·∫øn ƒë·ªông
     */
    private assessVolatilityRisk(marketData: MarketData): RiskFactor {
        try {
            const ohlcv = marketData.ohlcv || [];
            if (ohlcv.length < 20) {
                return { score: 0.5, reason: 'Kh√¥ng ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠' };
            }

            // T√≠nh to√°n volatility trong 24h qua
            const recent24h = ohlcv.slice(-24);
            const volatilities = recent24h.map(candle => {
                const [, , high, low, close] = candle;
                return (high - low) / close;
            });

            const avgVolatility = volatilities.reduce((a, b) => a + b, 0) / volatilities.length;
            const currentVolatility = volatilities[volatilities.length - 1];

            // T√≠nh to√°n True Range ƒë·ªÉ ƒë√°nh gi√° volatility
            let totalTR = 0;
            for (let i = 1; i < recent24h.length; i++) {
                const [, , high, low, close] = recent24h[i];
                const prevClose = recent24h[i - 1][4];

                const tr = Math.max(
                    high - low,
                    Math.abs(high - prevClose),
                    Math.abs(low - prevClose)
                );
                totalTR += tr / close; // Normalized TR
            }

            const atr = totalTR / (recent24h.length - 1);

            // ƒê√°nh gi√° r·ªßi ro d·ª±a tr√™n volatility
            let riskScore = 0;
            let reason = '';

            if (atr > 0.05) { // ATR > 5%
                riskScore = 0.8;
                reason = 'Volatility r·∫•t cao';
            } else if (atr > 0.03) { // ATR > 3%
                riskScore = 0.6;
                reason = 'Volatility cao';
            } else if (atr > 0.02) { // ATR > 2%
                riskScore = 0.4;
                reason = 'Volatility trung b√¨nh';
            } else {
                riskScore = 0.2;
                reason = 'Volatility th·∫•p';
            }

            return {
                score: riskScore,
                atr: atr,
                currentVolatility: currentVolatility,
                avgVolatility: avgVolatility,
                reason: reason
            };

        } catch (error) {
            Logger.error('‚ùå L·ªói ƒë√°nh gi√° volatility risk:', (error as Error).message);
            return { score: 0.5, reason: 'L·ªói t√≠nh to√°n volatility' };
        }
    }

    /**
     * ƒê√°nh gi√° r·ªßi ro t·ª´ ph√¢n t√≠ch k·ªπ thu·∫≠t
     */
    private assessTechnicalRisk(technicalAnalysis: TechnicalAnalysis): RiskFactor {
        try {
            if (!technicalAnalysis || !technicalAnalysis.indicators) {
                return { score: 0.5, reason: 'Kh√¥ng c√≥ d·ªØ li·ªáu k·ªπ thu·∫≠t' };
            }

            const indicators = technicalAnalysis.indicators;
            const riskFactors: string[] = [];
            let riskScore = 0;

            // ƒê√°nh gi√° RSI
            if (indicators.rsi) {
                if (indicators.rsi > 80 || indicators.rsi < 20) {
                    riskFactors.push('RSI ·ªü v√πng c·ª±c tr·ªã');
                    riskScore += 0.3;
                } else if (indicators.rsi > 70 || indicators.rsi < 30) {
                    riskFactors.push('RSI ·ªü v√πng qu√° mua/qu√° b√°n');
                    riskScore += 0.2;
                }
            }

            // ƒê√°nh gi√° MACD
            if (indicators.macd) {
                const { histogram } = indicators.macd;
                if (Math.abs(histogram) < 0.001) {
                    riskFactors.push('MACD g·∫ßn ƒëi·ªÉm giao c·∫Øt');
                    riskScore += 0.2;
                }
            }

            // ƒê√°nh gi√° Bollinger Bands
            if (indicators.bollinger) {
                const { upper, lower, middle } = indicators.bollinger;
                const currentPrice = technicalAnalysis.currentPrice || 0;
                const bandWidth = (upper - lower) / middle;

                if (bandWidth < 0.02) {
                    riskFactors.push('Bollinger Bands co h·∫πp - c√≥ th·ªÉ breakout');
                    riskScore += 0.3;
                }

                if (currentPrice > upper || currentPrice < lower) {
                    riskFactors.push('Gi√° ngo√†i Bollinger Bands');
                    riskScore += 0.2;
                }
            }

            // ƒê√°nh gi√° xu h∆∞·ªõng
            if (technicalAnalysis.trend) {
                if (technicalAnalysis.trend.direction === 'SIDEWAYS') {
                    riskFactors.push('Th·ªã tr∆∞·ªùng ƒëi ngang - kh√≥ d·ª± ƒëo√°n');
                    riskScore += 0.2;
                }
            }

            return {
                score: Math.min(riskScore, 1),
                factors: riskFactors,
                reason: riskFactors.length > 0 ? riskFactors.join(', ') : 'T√≠n hi·ªáu k·ªπ thu·∫≠t ·ªïn ƒë·ªãnh'
            };

        } catch (error) {
            Logger.error('‚ùå L·ªói ƒë√°nh gi√° technical risk:', (error as Error).message);
            return { score: 0.5, reason: 'L·ªói ph√¢n t√≠ch k·ªπ thu·∫≠t' };
        }
    }

    /**
     * ƒê√°nh gi√° r·ªßi ro t·ª´ ƒë·ªô tin c·∫≠y AI
     */
    private assessAIConfidenceRisk(aiPrediction: AIPrediction): RiskFactor {
        try {
            if (!aiPrediction || typeof aiPrediction.confidence !== 'number') {
                return { score: 0.7, reason: 'Kh√¥ng c√≥ d·ª± ƒëo√°n AI' };
            }

            const confidence = aiPrediction.confidence;
            let riskScore = 0;
            let reason = '';

            if (confidence < 0.5) {
                riskScore = 0.8;
                reason = 'ƒê·ªô tin c·∫≠y AI r·∫•t th·∫•p';
            } else if (confidence < 0.6) {
                riskScore = 0.6;
                reason = 'ƒê·ªô tin c·∫≠y AI th·∫•p';
            } else if (confidence < 0.7) {
                riskScore = 0.4;
                reason = 'ƒê·ªô tin c·∫≠y AI trung b√¨nh';
            } else if (confidence < 0.8) {
                riskScore = 0.2;
                reason = 'ƒê·ªô tin c·∫≠y AI cao';
            } else {
                riskScore = 0.1;
                reason = 'ƒê·ªô tin c·∫≠y AI r·∫•t cao';
            }

            return {
                score: riskScore,
                confidence: confidence,
                signal: aiPrediction.signal,
                reason: reason
            };

        } catch (error) {
            Logger.error('‚ùå L·ªói ƒë√°nh gi√° AI confidence risk:', (error as Error).message);
            return { score: 0.7, reason: 'L·ªói ƒë√°nh gi√° AI' };
        }
    }

    /**
     * ƒê√°nh gi√° r·ªßi ro v·ªã th·∫ø hi·ªán t·∫°i
     */
    private assessPositionRisk(currentPosition: Position | undefined, marketData: MarketData): RiskFactor {
        try {
            if (!currentPosition) {
                return { score: 0, reason: 'Kh√¥ng c√≥ v·ªã th·∫ø m·ªü' };
            }

            const currentPrice = marketData.currentPrice;
            const entryPrice = currentPosition.entryPrice;
            const unrealizedPnL = (currentPrice - entryPrice) / entryPrice;

            let riskScore = 0;
            let reason = '';

            // ƒê√°nh gi√° theo th·ªùi gian gi·ªØ v·ªã th·∫ø
            const holdingTime = Date.now() - currentPosition.entryTime;
            const holdingHours = holdingTime / (1000 * 60 * 60);

            if (holdingHours > 24) {
                riskScore += 0.3;
                reason += 'Gi·ªØ v·ªã th·∫ø qu√° l√¢u; ';
            }

            // ƒê√°nh gi√° theo P&L
            if (unrealizedPnL < -0.05) { // L·ªó > 5%
                riskScore += 0.5;
                reason += 'L·ªó l·ªõn; ';
            } else if (unrealizedPnL < -0.02) { // L·ªó > 2%
                riskScore += 0.3;
                reason += 'ƒêang l·ªó; ';
            }

            // Ki·ªÉm tra stop loss v√† take profit
            if (currentPosition.stopLoss && currentPrice <= currentPosition.stopLoss) {
                riskScore += 0.8;
                reason += 'Ch·∫°m stop loss; ';
            }

            if (currentPosition.takeProfit && currentPrice >= currentPosition.takeProfit) {
                riskScore -= 0.2; // Gi·∫£m r·ªßi ro khi ch·∫°m take profit
                reason += 'Ch·∫°m take profit; ';
            }

            return {
                score: Math.max(0, Math.min(riskScore, 1)),
                unrealizedPnL: unrealizedPnL,
                holdingHours: holdingHours,
                reason: reason || 'V·ªã th·∫ø ·ªïn ƒë·ªãnh'
            };

        } catch (error) {
            Logger.error('‚ùå L·ªói ƒë√°nh gi√° position risk:', (error as Error).message);
            return { score: 0.5, reason: 'L·ªói ƒë√°nh gi√° v·ªã th·∫ø' };
        }
    }

    /**
     * ƒê√°nh gi√° r·ªßi ro t·∫ßn su·∫•t giao d·ªãch
     */
    private assessTradingFrequencyRisk(): RiskFactor {
        try {
            const today = new Date().toDateString();

            // Reset counter n·∫øu l√† ng√†y m·ªõi
            if (this.lastTradeDate !== today) {
                this.dailyTradeCount = 0;
                this.lastTradeDate = today;
            }

            let riskScore = 0;
            let reason = '';

            if (this.dailyTradeCount >= this.maxTradesPerDay) {
                riskScore = 1;
                reason = 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n giao d·ªãch trong ng√†y';
            } else if (this.dailyTradeCount >= this.maxTradesPerDay * 0.8) {
                riskScore = 0.6;
                reason = 'G·∫ßn ƒë·∫°t gi·ªõi h·∫°n giao d·ªãch';
            } else if (this.dailyTradeCount >= this.maxTradesPerDay * 0.5) {
                riskScore = 0.3;
                reason = 'T·∫ßn su·∫•t giao d·ªãch cao';
            } else {
                riskScore = 0.1;
                reason = 'T·∫ßn su·∫•t giao d·ªãch b√¨nh th∆∞·ªùng';
            }

            return {
                score: riskScore,
                dailyCount: this.dailyTradeCount,
                maxDaily: this.maxTradesPerDay,
                reason: reason
            };

        } catch (error) {
            Logger.error('‚ùå L·ªói ƒë√°nh gi√° frequency risk:', (error as Error).message);
            return { score: 0.3, reason: 'L·ªói ƒë√°nh gi√° t·∫ßn su·∫•t' };
        }
    }

    /**
     * T√≠nh to√°n ƒëi·ªÉm r·ªßi ro t·ªïng th·ªÉ
     */
    private calculateOverallRisk(risks: RiskBreakdown): OverallRisk {
        const weights = {
            volatility: 0.25,
            technical: 0.2,
            aiConfidence: 0.2,
            position: 0.25,
            frequency: 0.1
        };

        let totalScore = 0;
        const factors: string[] = [];

        for (const [type, risk] of Object.entries(risks)) {
            if (risk && typeof risk.score === 'number') {
                totalScore += risk.score * weights[type as keyof typeof weights];
                if (risk.reason) {
                    factors.push(`${type}: ${risk.reason}`);
                }
            }
        }

        return {
            score: Math.min(totalScore, 1),
            factors: factors,
            breakdown: risks
        };
    }

    /**
     * X√°c ƒë·ªãnh m·ª©c ƒë·ªô r·ªßi ro
     */
    private getRiskLevel(score: number): 'LOW' | 'MEDIUM' | 'HIGH' {
        if (score >= 0.7) { return 'HIGH'; }
        if (score >= 0.4) { return 'MEDIUM'; }
        return 'LOW';
    }

    /**
     * ƒê∆∞a ra khuy·∫øn ngh·ªã d·ª±a tr√™n ƒë√°nh gi√° r·ªßi ro
     */
    private getRecommendations(riskAssessment: OverallRisk): string[] {
        const recommendations: string[] = [];
        const score = riskAssessment.score;

        if (score >= 0.7) {
            recommendations.push('Tr√°nh giao d·ªãch trong ƒëi·ªÅu ki·ªán r·ªßi ro cao');
            recommendations.push('Ch·ªù th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh h∆°n');
        } else if (score >= 0.5) {
            recommendations.push('Gi·∫£m k√≠ch th∆∞·ªõc v·ªã th·∫ø');
            recommendations.push('ƒê·∫∑t stop loss ch·∫∑t ch·∫Ω h∆°n');
        } else if (score >= 0.3) {
            recommendations.push('Giao d·ªãch v·ªõi k√≠ch th∆∞·ªõc v·ªã th·∫ø b√¨nh th∆∞·ªùng');
            recommendations.push('Theo d√µi ch·∫∑t ch·∫Ω c√°c t√≠n hi·ªáu');
        } else {
            recommendations.push('ƒêi·ªÅu ki·ªán thu·∫≠n l·ª£i cho giao d·ªãch');
            recommendations.push('C√≥ th·ªÉ tƒÉng k√≠ch th∆∞·ªõc v·ªã th·∫ø nh·∫π');
        }

        return recommendations;
    }

    /**
     * T√≠nh to√°n k√≠ch th∆∞·ªõc v·ªã th·∫ø d·ª±a tr√™n r·ªßi ro
     */
    private calculatePositionSize(riskScore: number, _marketData: MarketData): number {
        const baseAmount = parseFloat(process.env.TRADE_AMOUNT || '10');
        let multiplier = 1;

        if (riskScore >= 0.7) {
            multiplier = 0.2; // Gi·∫£m 80% k√≠ch th∆∞·ªõc
        } else if (riskScore >= 0.5) {
            multiplier = 0.5; // Gi·∫£m 50% k√≠ch th∆∞·ªõc
        } else if (riskScore >= 0.3) {
            multiplier = 0.8; // Gi·∫£m 20% k√≠ch th∆∞·ªõc
        } else {
            multiplier = 1.2; // TƒÉng 20% k√≠ch th∆∞·ªõc
        }

        const adjustedAmount = baseAmount * multiplier;
        return Math.min(adjustedAmount, this.maxPositionSize);
    }

    /**
     * T√≠nh to√°n stop loss ƒë·ªông
     */
    private calculateDynamicStopLoss(riskScore: number, _marketData: MarketData): number {
        let stopLossPercentage = this.stopLossPercentage;

        // ƒêi·ªÅu ch·ªânh stop loss d·ª±a tr√™n r·ªßi ro
        if (riskScore >= 0.7) {
            stopLossPercentage *= 0.5; // Stop loss ch·∫∑t h∆°n
        } else if (riskScore >= 0.5) {
            stopLossPercentage *= 0.7;
        } else if (riskScore <= 0.2) {
            stopLossPercentage *= 1.5; // Stop loss r·ªông h∆°n
        }

        return stopLossPercentage;
    }

    /**
     * T√≠nh to√°n take profit ƒë·ªông
     */
    private calculateDynamicTakeProfit(riskScore: number, _marketData: MarketData): number {
        let takeProfitPercentage = this.takeProfitPercentage;

        // ƒêi·ªÅu ch·ªânh take profit d·ª±a tr√™n r·ªßi ro
        if (riskScore >= 0.7) {
            takeProfitPercentage *= 0.7; // Take profit g·∫ßn h∆°n
        } else if (riskScore <= 0.2) {
            takeProfitPercentage *= 1.3; // Take profit xa h∆°n
        }

        return takeProfitPercentage;
    }

    /**
     * Ghi nh·∫≠n giao d·ªãch m·ªõi
     */
    recordTrade(trade: Trade): void {
        this.dailyTradeCount++;
        this.tradeHistory.push({
            ...trade,
            timestamp: Date.now()
        });

        // Gi·ªõi h·∫°n l·ªãch s·ª≠
        if (this.tradeHistory.length > this.maxHistoryLength) {
            this.tradeHistory.shift();
        }
    }

    /**
     * L·∫•y th·ªëng k√™ r·ªßi ro
     */
    getRiskStats(): {
        dailyTradeCount: number;
        maxTradesPerDay: number;
        tradeHistoryLength: number;
        lastTradeDate: string | null;
    } {
        return {
            dailyTradeCount: this.dailyTradeCount,
            maxTradesPerDay: this.maxTradesPerDay,
            tradeHistoryLength: this.tradeHistory.length,
            lastTradeDate: this.lastTradeDate
        };
    }
}

export default RiskManager;